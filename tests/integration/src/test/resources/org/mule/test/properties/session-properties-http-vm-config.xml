<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
            http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
            http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd


http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">

    <description>Test session properties propagates between flows</description>

    <vm:connector name="vmConnector"/>
    <http:connector name="httpConnector"/>

    <!-- F1 call F2, F2 call F3 scenario >>> -->

    <spring:bean id="property-f1p1" class="org.mule.functional.property.SessionPropertiesValidatorComponent">
        <spring:property name="expectedProperties">
            <spring:map>
                <spring:entry key="flow1-p1" value="flow1-p1-value"/>
            </spring:map>
        </spring:property>
    </spring:bean>

    <spring:bean id="property-f1p1-f2p1" class="org.mule.functional.property.SessionPropertiesValidatorComponent">
        <spring:property name="expectedProperties">
            <spring:map>
                <spring:entry key="flow1-p1" value="flow1-p1-value"/>
                <spring:entry key="flow2-p1" value="flow2-p1-value"/>
            </spring:map>
        </spring:property>
    </spring:bean>

    <spring:bean id="property-f1p1-f2p1-f1p2" class="org.mule.functional.property.SessionPropertiesValidatorComponent">
        <spring:property name="expectedProperties">
            <spring:map>
                <spring:entry key="flow1-p1" value="flow1-p1-value"/>
                <spring:entry key="flow2-p1" value="flow2-p1-value"/>
                <spring:entry key="flow1-p2" value="flow1-p2-value"/>
            </spring:map>
        </spring:property>
    </spring:bean>

    <!-- Vm to Http endpoint scenario >>> -->

    <flow name="vm-inbound">

        <vm:inbound-endpoint connector-ref="vmConnector" path="vm-inbound-flow" exchange-pattern="request-response"/>

        <message-properties-transformer scope="session">
            <add-message-property key="flow1-p1" value="flow1-p1-value"/>
        </message-properties-transformer>

        <component><spring-object bean="property-f1p1"/></component>

        <http:outbound-endpoint name="http-outbound-o" connector-ref="httpConnector"
                              host="localhost" port="${port2}"
                              path="http-outbound-flow" exchange-pattern="request-response">
        </http:outbound-endpoint>

        <component><spring-object bean="property-f1p1-f2p1"/></component>

        <message-properties-transformer scope="session">
            <add-message-property key="flow1-p2" value="flow1-p2-value"/>
        </message-properties-transformer>

        <component><spring-object bean="property-f1p1-f2p1-f1p2"/></component>

    </flow>

    <flow name="http-outbound">

        <http:inbound-endpoint connector-ref="httpConnector" name="http-outbound-i"
                               host="localhost" port="${port2}" path="http-outbound-flow"
                                exchange-pattern="request-response">
        </http:inbound-endpoint>

        <component><spring-object bean="property-f1p1"/></component>

        <message-properties-transformer scope="session">
            <add-message-property key="flow2-p1" value="flow2-p1-value"/>
        </message-properties-transformer>

        <component><spring-object bean="property-f1p1-f2p1"/></component>

    </flow>

    <!-- Vm to Http endpoint scenario <<< -->

    <!-- Http to Vm endpoint scenario >>> -->

    <flow name="http-inbound">

        <http:inbound-endpoint connector-ref="httpConnector" name="http-inbound-flow"
                               host="localhost" port="${port1}" path="http-inbound-flow">
        </http:inbound-endpoint>

        <message-properties-transformer scope="session">
            <add-message-property key="flow1-p1" value="flow1-p1-value"/>
        </message-properties-transformer>

        <component><spring-object bean="property-f1p1"/></component>

        <vm:outbound-endpoint name="vm-outbound-flowo" connector-ref="vmConnector"
                              path="vm-outbound-flow" exchange-pattern="request-response">
        </vm:outbound-endpoint>

        <component><spring-object bean="property-f1p1-f2p1"/></component>

        <message-properties-transformer scope="session">
            <add-message-property key="flow1-p2" value="flow1-p2-value"/>
        </message-properties-transformer>

        <component><spring-object bean="property-f1p1-f2p1-f1p2"/></component>

    </flow>

    <flow name="vm-outbound">

        <vm:inbound-endpoint connector-ref="vmConnector" path="vm-outbound-flow" exchange-pattern="request-response"/>

        <component><spring-object bean="property-f1p1"/></component>

        <message-properties-transformer scope="session">
            <add-message-property key="flow2-p1" value="flow2-p1-value"/>
        </message-properties-transformer>

        <component><spring-object bean="property-f1p1-f2p1"/></component>

    </flow>

    <!-- Http to Vm endpoint scenario <<< -->

</mule>
